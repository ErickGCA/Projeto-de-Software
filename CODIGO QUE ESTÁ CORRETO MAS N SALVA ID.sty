import React, { useEffect, useState } from "react";
import { Button, Form, Modal, Tab, Tabs } from "react-bootstrap";
import api from "../../api/api";

function AddEditModal({ show, handleClose, title, item, onSave }) {
  const [formData, setFormData] = useState({
    id: "",
    username: "",
    nis: "",
    cpf: "",
    endereco: "",
    telefone: "",
    mes: "",
    familiasPAIF: 0,
    novasFamiliasPAIF: 0,
    familiasExtremaPobreza: 0,
    bolsaFamilia: 0,
    descumprimentoCondicionalidades: 0,
    bpc: 0,
    trabalhoInfantil: 0,
    acolhimento: 0,
    atendimentosCRAS: 0,
    cadastroUnico: 0,
    atualizacaoCadastral: 0,
    bpcIndividuos: 0,
    creas: 0,
    visitasDomiciliares: 0,
    auxiliosNatalidade: 0,
    auxiliosFuneral: 0,
    outrosBeneficios: 0,
    familiasParticipantesPAIF: 0,
    criancas06SCFV: 0,
    criancas714SCFV: 0,
    adolescentes1517SCFV: 0,
    adultosSCFV: 0,
    idososSCFV: 0,
    palestrasOficinas: 0,
    pessoasDeficiencia: 0,
    // Campos da aba "Filiado"
    filiadoUsername: "",
    filiadoCpf: "",
    dataNascimento: "",
    beneficiario: "", // Supondo que seja um ID ou objeto Beneficiario
    beneficiarioId: "",
    beneficiarioNome: "",
    categoriaId: "",
  });

  const [beneficiarios, setBeneficiarios] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredBeneficiarios, setFilteredBeneficiarios] = useState([]);
  const [isSearching, setIsSearching] = useState(false);
  const [activeTab, setActiveTab] = useState("basics");

  useEffect(() => {
    if (item) {
      setFormData({
        id: item.id || "",
        username: item.username || "",
        nis: item.nis || "",
        cpf: item.cpf || "",
        endereco: item.endereco || "",
        telefone: item.telefone || "",
        mes: item.mes || "",
        familiasPAIF: item.familiasPAIF || 0,
        novasFamiliasPAIF: item.novasFamiliasPAIF || 0,
        familiasExtremaPobreza: item.familiasExtremaPobreza || 0,
        bolsaFamilia: item.bolsaFamilia || 0,
        descumprimentoCondicionalidades:
          item.descumprimentoCondicionalidades || 0,
        bpc: item.bpc || 0,
        trabalhoInfantil: item.trabalhoInfantil || 0,
        acolhimento: item.acolhimento || 0,
        atendimentosCRAS: item.atendimentosCRAS || 0,
        cadastroUnico: item.cadastroUnico || 0,
        atualizacaoCadastral: item.atualizacaoCadastral || 0,
        bpcIndividuos: item.bpcIndividuos || 0,
        creas: item.creas || 0,
        visitasDomiciliares: item.visitasDomiciliares || 0,
        auxiliosNatalidade: item.auxiliosNatalidade || 0,
        auxiliosFuneral: item.auxiliosFuneral || 0,
        outrosBeneficios: item.outrosBeneficios || 0,
        familiasParticipantesPAIF: item.familiasParticipantesPAIF || 0,
        criancas06SCFV: item.criancas06SCFV || 0,
        criancas714SCFV: item.criancas714SCFV || 0,
        adolescentes1517SCFV: item.adolescentes1517SCFV || 0,
        adultosSCFV: item.adultosSCFV || 0,
        idososSCFV: item.idososSCFV || 0,
        palestrasOficinas: item.palestrasOficinas || 0,
        pessoasDeficiencia: item.pessoasDeficiencia || 0,
        // Dados da aba "Filiado"
        filiadoUsername: item.filiadoUsername || "",
        filiadoCpf: item.filiadoCpf || "",
        dataNascimento: item.dataNascimento || "",
        beneficiario: item.beneficiario || "",
        beneficiarioId: item.beneficiario?.id || "",
        beneficiarioNome: item.beneficiario?.username || "",
        mes: mesesToPortugues[item.mes] || item.mes,
      });
      if (item.beneficiario?.username) {
        setSearchTerm(item.beneficiario.username);
      }
    }
  }, [item]);

  const mesesTraducao = {
    JANEIRO: "JANUARY",
    FEVEREIRO: "FEBRUARY",
    MARCO: "MARCH",
    ABRIL: "APRIL",
    MAIO: "MAY",
    JUNHO: "JUNE",
    JULHO: "JULY",
    AGOSTO: "AUGUST",
    SETEMBRO: "SEPTEMBER",
    OUTUBRO: "OCTOBER",
    NOVEMBRO: "NOVEMBER",
    DEZEMBRO: "DECEMBER",
  };

  const mesesToPortugues = {
    JANUARY: "JANEIRO",
    FEBRUARY: "FEVEREIRO",
    MARCH: "MARCO",
    APRIL: "ABRIL",
    MAY: "MAIO",
    JUNE: "JUNHO",
    JULY: "JULHO",
    AUGUST: "AGOSTO",
    SEPTEMBER: "SETEMBRO",
    OCTOBER: "OUTUBRO",
    NOVEMBER: "NOVEMBRO",
    DECEMBER: "DEZEMBRO",
  };
  useEffect(() => {
    if (isSearching) {
      const results = beneficiarios.filter(
        (beneficiario) =>
          beneficiario.username
            .toLowerCase()
            .includes(searchTerm.toLowerCase()) ||
          beneficiario.cpf
            .replace(/\D/g, "")
            .includes(searchTerm.replace(/\D/g, "")) ||
          (beneficiario.nis && beneficiario.nis.includes(searchTerm))
      );
      setFilteredBeneficiarios(results);
    }
  }, [searchTerm, beneficiarios, isSearching]);

  useEffect(() => {
    const fetchBeneficiarios = async () => {
      try {
        const response = await api.get("/Beneficiario");
        setBeneficiarios(response.data);
        setFilteredBeneficiarios(response.data);
      } catch (err) {
        console.error("Erro ao buscar beneficiários:", err);
      }
    };

    fetchBeneficiarios();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: name === "mes" ? mesesTraducao[value] || value : value,
    });
  };

  const handleBeneficiarioSearchChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    setIsSearching(true);

    if (!value) {
      setFormData((prev) => ({
        ...prev,
        beneficiarioId: "",
        beneficiarioNome: "",
      }));
    }
  };

  const handleBeneficiarioSelect = (beneficiario) => {
    setFormData((prev) => ({
      ...prev,
      beneficiarioId: beneficiario.id,
      beneficiarioNome: beneficiario.username,
    }));
    setSearchTerm(beneficiario.username);
    setIsSearching(false);
  };

  const formatCPF = (cpf) => {
    const numbers = cpf.replace(/\D/g, "");
    return numbers.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
  };

  const handleSubmit = async () => {
    try {
      // If we're on the filiado tab and have filiado data, create a filiado first
      if (activeTab === "filiado" && formData.filiadoUsername) {
        const filiadoData = {
          username: formData.filiadoUsername,
          cpf: formData.filiadoCpf,
          data: formData.dataNascimento,
          beneficiario: {
            id: formData.beneficiarioId,
          },
        };

        try {
          // Create filiado
          await api.post("/filiado", filiadoData);
        } catch (error) {
          console.error("Error creating filiado:", error);
          // Handle error (maybe show an alert to the user)
          return;
        }
      }

      // Then proceed with the original form submission
      const updatedFormData = {
        ...formData,
        beneficiario: {
          id: formData.beneficiarioId,
        },
      };
      onSave(updatedFormData);
    } catch (error) {
      console.error("Error in form submission:", error);
      // Handle error appropriately
    }
  };
  const [categorias, setCategorias] = useState([]);

  useEffect(() => {
    const fetchCategorias = async () => {
      try {
        const response = await api.get("/categorias"); // API para buscar categorias
        setCategorias(response.data);
      } catch (err) {
        console.error("Erro ao buscar categorias:", err);
      }
    };

    fetchCategorias();
  }, []);

  const searchStyles = {
    inputContainer: {
      position: "relative",
      marginBottom: "1rem",
    },
    beneficiarioList: {
      position: "absolute",
      top: "100%",
      left: 0,
      right: 0,
      maxHeight: "200px",
      overflowY: "auto",
      backgroundColor: "white",
      border: "1px solid #ddd",
      borderRadius: "4px",
      zIndex: 1000,
      boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
    },
    beneficiarioItem: {
      padding: "8px 12px",
      cursor: "pointer",
      borderBottom: "1px solid #eee",
    },
    beneficiarioInfo: {
      display: "flex",
      flexDirection: "column",
    },
    beneficiarioName: {
      fontWeight: "bold",
    },
    beneficiarioDetails: {
      fontSize: "0.9em",
      color: "#666",
    },
  };

  return (
    <Modal show={show} onHide={handleClose}>
      <Modal.Header closeButton>
        <Modal.Title>{title}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Tabs
          activeKey={activeTab}
          onSelect={(k) => setActiveTab(k)}
          className="mb-3"
        >
          <Tab eventKey="basics" title="Informações Básicas">
            <Form>
              <Form.Group controlId="formUsername">
                <Form.Label>Nome</Form.Label>
                <Form.Control
                  type="text"
                  name="username"
                  value={formData.username}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group controlId="formNis">
                <Form.Label>NIS</Form.Label>
                <Form.Control
                  type="text"
                  name="nis"
                  value={formData.nis}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group controlId="formCpf">
                <Form.Label>CPF</Form.Label>
                <Form.Control
                  type="text"
                  name="cpf"
                  value={formData.cpf}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group controlId="formEndereco">
                <Form.Label>Endereço</Form.Label>
                <Form.Control
                  type="text"
                  name="endereco"
                  value={formData.endereco}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group controlId="formTelefone">
                <Form.Label>Telefone</Form.Label>
                <Form.Control
                  type="text"
                  name="telefone"
                  value={formData.telefone}
                  onChange={handleChange}
                />
                <Form.Group controlId="formCategoria">
                  <Form.Label>Categoria</Form.Label>
                  <Form.Control
                    as="select"
                    name="categoriaId"
                    value={formData.categoriaId || ""}
                    onChange={handleChange}
                  >
                    <option value="">Selecione uma categoria</option>
                    {categorias.map((categoria) => (
                      <option key={categoria.id} value={categoria.id}>
                        {categoria.nome}{" "}
                        {/* O nome da categoria pode variar dependendo do seu modelo */}
                      </option>
                    ))}
                  </Form.Control>
                </Form.Group>
              </Form.Group>
            </Form>
          </Tab>